
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 10 23:47:22 CST 2018
//----------------------------------------------------

import java_cup.runtime.*;
import javax.swing.JTextPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 10 23:47:22 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\213\000\002\002\004\000\002\026\004\000\002\026" +
    "\003\000\002\026\004\000\002\026\003\000\002\026\003" +
    "\000\002\026\004\000\002\026\003\000\002\004\003\000" +
    "\002\042\002\000\002\004\006\000\002\003\006\000\002" +
    "\043\002\000\002\003\010\000\002\044\002\000\002\045" +
    "\002\000\002\007\012\000\002\046\002\000\002\047\002" +
    "\000\002\007\011\000\002\006\004\000\002\050\002\000" +
    "\002\006\007\000\002\027\007\000\002\041\003\000\002" +
    "\041\005\000\002\030\003\000\002\030\003\000\002\031" +
    "\006\000\002\031\007\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\051\002\000\002\025\010\000\002\052\002\000\002\025" +
    "\011\000\002\053\002\000\002\025\013\000\002\054\002" +
    "\000\002\025\012\000\002\032\003\000\002\032\003\000" +
    "\002\032\004\000\002\032\004\000\002\032\004\000\002" +
    "\032\003\000\002\032\003\000\002\032\004\000\002\032" +
    "\004\000\002\032\003\000\002\055\002\000\002\010\007" +
    "\000\002\056\002\000\002\033\012\000\002\057\002\000" +
    "\002\060\002\000\002\033\014\000\002\011\007\000\002" +
    "\005\004\000\002\005\004\000\002\034\004\000\002\034" +
    "\003\000\002\034\003\000\002\034\004\000\002\034\004" +
    "\000\002\034\003\000\002\034\004\000\002\034\003\000" +
    "\002\034\004\000\002\034\003\000\002\034\004\000\002" +
    "\034\003\000\002\034\003\000\002\034\004\000\002\034" +
    "\003\000\002\034\004\000\002\034\004\000\002\061\002" +
    "\000\002\034\006\000\002\034\004\000\002\034\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\004\000\002" +
    "\017\003\000\002\062\002\000\002\013\006\000\002\063" +
    "\002\000\002\064\002\000\002\065\002\000\002\066\002" +
    "\000\002\012\016\000\002\067\002\000\002\070\002\000" +
    "\002\071\002\000\002\014\013\000\002\072\002\000\002" +
    "\015\006\000\002\073\002\000\002\074\002\000\002\075" +
    "\002\000\002\022\013\000\002\076\002\000\002\077\002" +
    "\000\002\100\002\000\002\016\013\000\002\020\003\000" +
    "\002\020\004\000\002\101\002\000\002\102\002\000\002" +
    "\035\007\000\002\002\003\000\002\103\002\000\002\002" +
    "\006\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\002\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\104" +
    "\002\000\002\023\006\000\002\021\003\000\002\105\002" +
    "\000\002\021\006\000\002\106\002\000\002\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\020\003\013\027\005\053\011\055\004\056" +
    "\010\057\015\060\016\001\002\000\016\030\uffe3\061\uffe3" +
    "\062\uffe3\063\uffe3\064\uffe3\065\uffe3\001\002\000\004\023" +
    "\335\001\002\000\004\002\334\001\002\000\004\030\023" +
    "\001\002\000\050\002\uffe6\003\uffe6\027\uffe6\032\uffe6\035" +
    "\uffe6\037\uffe6\042\uffe6\044\uffe6\053\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\066\uffe6\001\002\000\050\002\uffe7\003\uffe7\027\uffe7" +
    "\032\uffe7\035\uffe7\037\uffe7\042\uffe7\044\uffe7\053\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7" +
    "\064\uffe7\065\uffe7\066\uffe7\001\002\000\022\002\uffff\003" +
    "\013\027\005\053\011\055\004\056\010\057\015\060\016" +
    "\001\002\000\022\002\ufffa\003\013\027\005\053\011\055" +
    "\004\056\010\057\015\060\016\001\002\000\022\002\ufffd" +
    "\003\013\027\005\053\011\055\004\056\010\057\015\060" +
    "\016\001\002\000\016\030\uffe1\061\uffe1\062\uffe1\063\uffe1" +
    "\064\uffe1\065\uffe1\001\002\000\016\030\uffe2\061\uffe2\062" +
    "\uffe2\063\uffe2\064\uffe2\065\uffe2\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\000\001\002\000\004\066\024\001\002" +
    "\000\006\031\025\043\026\001\002\000\004\066\325\001" +
    "\002\000\022\003\uffd9\044\uffdb\053\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\066\uffd9\001\002\000\020\003\036\053" +
    "\011\055\004\056\010\057\015\060\016\066\035\001\002" +
    "\000\004\044\031\001\002\000\004\002\uffda\001\002\000" +
    "\022\003\036\044\uffd2\053\011\055\004\056\010\057\015" +
    "\060\016\066\035\001\002\000\022\003\036\044\uffd3\053" +
    "\011\055\004\056\010\057\015\060\016\066\035\001\002" +
    "\000\014\061\101\062\057\063\054\064\063\065\103\001" +
    "\002\000\004\023\046\001\002\000\022\003\036\044\uffca" +
    "\053\011\055\004\056\010\057\015\060\016\066\035\001" +
    "\002\000\022\003\036\044\uffce\053\011\055\004\056\010" +
    "\057\015\060\016\066\035\001\002\000\022\003\036\044" +
    "\uffcd\053\011\055\004\056\010\057\015\060\016\066\035" +
    "\001\002\000\004\044\042\001\002\000\004\002\uffd8\001" +
    "\002\000\004\044\uffcc\001\002\000\004\044\uffcf\001\002" +
    "\000\004\044\uffcb\001\002\000\016\024\ufff0\061\ufff3\062" +
    "\ufff3\063\ufff3\064\ufff3\065\ufff3\001\002\000\014\061\101" +
    "\062\057\063\054\064\063\065\103\001\002\000\004\024" +
    "\051\001\002\000\004\043\052\001\002\000\036\003\uffef" +
    "\032\uffef\035\uffef\037\uffef\042\uffef\044\uffef\053\uffef\056" +
    "\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef" +
    "\001\002\000\036\003\075\032\074\035\102\037\077\042" +
    "\061\044\055\053\011\056\010\061\101\062\057\063\054" +
    "\064\063\065\103\066\064\001\002\000\004\066\uffde\001" +
    "\002\000\050\003\uff91\032\uff91\033\uff91\034\uff91\035\uff91" +
    "\037\uff91\042\uff91\044\uff91\053\uff91\055\uff91\056\uff91\057" +
    "\uff91\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91" +
    "\066\uff91\001\002\000\004\044\267\001\002\000\004\066" +
    "\uffdf\001\002\000\036\003\075\032\074\035\102\037\077" +
    "\042\061\044\uffb1\053\011\056\010\061\101\062\057\063" +
    "\054\064\063\065\103\066\064\001\002\000\004\023\262" +
    "\001\002\000\036\003\075\032\074\035\102\037\077\042" +
    "\061\044\uffba\053\011\056\010\061\101\062\057\063\054" +
    "\064\063\065\103\066\064\001\002\000\004\066\uffdd\001" +
    "\002\000\012\010\240\011\242\023\241\025\243\001\002" +
    "\000\036\003\075\032\074\035\102\037\077\042\061\044" +
    "\uffb6\053\011\056\010\061\101\062\057\063\054\064\063" +
    "\065\103\066\064\001\002\000\036\003\075\032\074\035" +
    "\102\037\077\042\061\044\uffb3\053\011\056\010\061\101" +
    "\062\057\063\054\064\063\065\103\066\064\001\002\000" +
    "\036\003\075\032\074\035\102\037\077\042\061\044\uffb4" +
    "\053\011\056\010\061\101\062\057\063\054\064\063\065" +
    "\103\066\064\001\002\000\036\003\075\032\074\035\102" +
    "\037\077\042\061\044\uffbd\053\011\056\010\061\101\062" +
    "\057\063\054\064\063\065\103\066\064\001\002\000\004" +
    "\066\uff8f\001\002\000\022\003\uffee\044\uffee\053\uffee\055" +
    "\uffee\056\uffee\057\uffee\060\uffee\066\uffee\001\002\000\004" +
    "\026\215\001\002\000\004\023\205\001\002\000\036\003" +
    "\075\032\074\035\102\037\077\042\061\044\uffab\053\011" +
    "\056\010\061\101\062\057\063\054\064\063\065\103\066" +
    "\064\001\002\000\036\003\075\032\074\035\102\037\077" +
    "\042\061\044\uffbe\053\011\056\010\061\101\062\057\063" +
    "\054\064\063\065\103\066\064\001\002\000\004\066\uffa4" +
    "\001\002\000\042\003\075\032\074\033\146\034\147\035" +
    "\102\037\077\042\061\044\uffb8\053\011\056\010\061\101" +
    "\062\057\063\054\064\063\065\103\066\064\001\002\000" +
    "\004\066\uffe0\001\002\000\004\023\104\001\002\000\004" +
    "\066\uffdc\001\002\000\016\046\uff9f\047\uff9f\050\uff9f\051" +
    "\uff9f\063\uff9f\066\uff9f\001\002\000\016\046\113\047\112" +
    "\050\114\051\107\063\115\066\106\001\002\000\050\012" +
    "\uff85\013\uff85\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85" +
    "\024\uff85\026\uff85\040\uff85\041\uff85\043\uff85\045\uff85\046" +
    "\uff85\047\uff85\050\uff85\051\uff85\063\uff85\066\uff85\001\002" +
    "\000\050\012\uff88\013\uff88\015\uff88\016\uff88\017\uff88\020" +
    "\uff88\021\uff88\024\uff88\026\uff88\040\uff88\041\uff88\043\uff88" +
    "\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\063\uff88\066" +
    "\uff88\001\002\000\004\024\135\001\002\000\030\012\123" +
    "\013\122\015\117\016\120\017\121\046\uff81\047\uff81\050" +
    "\uff81\051\uff81\063\uff81\066\uff81\001\002\000\050\012\uff87" +
    "\013\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\024" +
    "\uff87\026\uff87\040\uff87\041\uff87\043\uff87\045\uff87\046\uff87" +
    "\047\uff87\050\uff87\051\uff87\063\uff87\066\uff87\001\002\000" +
    "\050\012\uff84\013\uff84\015\uff84\016\uff84\017\uff84\020\uff84" +
    "\021\uff84\024\uff84\026\uff84\040\uff84\041\uff84\043\uff84\045" +
    "\uff84\046\uff84\047\uff84\050\uff84\051\uff84\063\uff84\066\uff84" +
    "\001\002\000\050\012\uff86\013\uff86\015\uff86\016\uff86\017" +
    "\uff86\020\uff86\021\uff86\024\uff86\026\uff86\040\uff86\041\uff86" +
    "\043\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86\063" +
    "\uff86\066\uff86\001\002\000\050\012\uff89\013\uff89\015\uff89" +
    "\016\uff89\017\uff89\020\uff89\021\uff89\024\uff89\026\uff89\040" +
    "\uff89\041\uff89\043\uff89\045\uff89\046\uff89\047\uff89\050\uff89" +
    "\051\uff89\063\uff89\066\uff89\001\002\000\016\046\uff7d\047" +
    "\uff7d\050\uff7d\051\uff7d\063\uff7d\066\uff7d\001\002\000\016" +
    "\046\uff80\047\uff80\050\uff80\051\uff80\063\uff80\066\uff80\001" +
    "\002\000\016\046\uff7f\047\uff7f\050\uff7f\051\uff7f\063\uff7f" +
    "\066\uff7f\001\002\000\016\046\uff7e\047\uff7e\050\uff7e\051" +
    "\uff7e\063\uff7e\066\uff7e\001\002\000\016\046\uff82\047\uff82" +
    "\050\uff82\051\uff82\063\uff82\066\uff82\001\002\000\016\046" +
    "\uff83\047\uff83\050\uff83\051\uff83\063\uff83\066\uff83\001\002" +
    "\000\016\046\113\047\112\050\114\051\107\063\115\066" +
    "\106\001\002\000\006\024\uff7c\041\uff7c\001\002\000\012" +
    "\020\130\021\127\024\uff7b\041\uff7b\001\002\000\016\046" +
    "\uff7a\047\uff7a\050\uff7a\051\uff7a\063\uff7a\066\uff7a\001\002" +
    "\000\016\046\uff78\047\uff78\050\uff78\051\uff78\063\uff78\066" +
    "\uff78\001\002\000\016\046\113\047\112\050\114\051\107" +
    "\063\115\066\106\001\002\000\006\024\uff77\041\uff77\001" +
    "\002\000\016\046\113\047\112\050\114\051\107\063\115" +
    "\066\106\001\002\000\006\024\uff79\041\uff79\001\002\000" +
    "\004\043\uff9e\001\002\000\004\043\137\001\002\000\036" +
    "\003\uff9d\032\uff9d\035\uff9d\037\uff9d\042\uff9d\044\uff9d\053" +
    "\uff9d\056\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d" +
    "\066\uff9d\001\002\000\036\003\075\032\074\035\102\037" +
    "\077\042\061\044\055\053\011\056\010\061\101\062\057" +
    "\063\054\064\063\065\103\066\064\001\002\000\036\003" +
    "\uff9c\032\uff9c\035\uff9c\037\uff9c\042\uff9c\044\uff9c\053\uff9c" +
    "\056\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066" +
    "\uff9c\001\002\000\004\044\uffb9\001\002\000\004\044\uffaa" +
    "\001\002\000\042\003\075\032\074\033\146\034\147\035" +
    "\102\037\077\042\061\044\uffa9\053\011\056\010\061\101" +
    "\062\057\063\054\064\063\065\103\066\064\001\002\000" +
    "\004\044\uffa7\001\002\000\004\023\153\001\002\000\004" +
    "\043\150\001\002\000\036\003\uff9b\032\uff9b\035\uff9b\037" +
    "\uff9b\042\uff9b\044\uff9b\053\uff9b\056\uff9b\061\uff9b\062\uff9b" +
    "\063\uff9b\064\uff9b\065\uff9b\066\uff9b\001\002\000\036\003" +
    "\075\032\074\035\102\037\077\042\061\044\055\053\011" +
    "\056\010\061\101\062\057\063\054\064\063\065\103\066" +
    "\064\001\002\000\004\044\uff9a\001\002\000\016\046\uff95" +
    "\047\uff95\050\uff95\051\uff95\063\uff95\066\uff95\001\002\000" +
    "\016\046\113\047\112\050\114\051\107\063\115\066\106" +
    "\001\002\000\004\024\156\001\002\000\004\043\uff94\001" +
    "\002\000\004\043\160\001\002\000\036\003\uff93\032\uff93" +
    "\035\uff93\037\uff93\042\uff93\044\uff93\053\uff93\056\uff93\061" +
    "\uff93\062\uff93\063\uff93\064\uff93\065\uff93\066\uff93\001\002" +
    "\000\036\003\075\032\074\035\102\037\077\042\061\044" +
    "\055\053\011\056\010\061\101\062\057\063\054\064\063" +
    "\065\103\066\064\001\002\000\042\003\uff92\032\uff92\033" +
    "\uff92\034\uff92\035\uff92\037\uff92\042\uff92\044\uff92\053\uff92" +
    "\056\uff92\061\uff92\062\uff92\063\uff92\064\uff92\065\uff92\066" +
    "\uff92\001\002\000\004\044\uffa8\001\002\000\004\066\165" +
    "\001\002\000\004\025\200\001\002\000\004\040\167\001" +
    "\002\000\016\046\uffa3\047\uffa3\050\uffa3\051\uffa3\063\uffa3" +
    "\066\uffa3\001\002\000\016\046\113\047\112\050\114\051" +
    "\107\063\115\066\106\001\002\000\004\041\172\001\002" +
    "\000\016\046\uffa2\047\uffa2\050\uffa2\051\uffa2\063\uffa2\066" +
    "\uffa2\001\002\000\016\046\113\047\112\050\114\051\107" +
    "\063\115\066\106\001\002\000\004\043\175\001\002\000" +
    "\036\003\uffa1\032\uffa1\035\uffa1\037\uffa1\042\uffa1\044\uffa1" +
    "\053\uffa1\056\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\066\uffa1\001\002\000\036\003\075\032\074\035\102" +
    "\037\077\042\061\044\055\053\011\056\010\061\101\062" +
    "\057\063\054\064\063\065\103\066\064\001\002\000\036" +
    "\003\uffa0\032\uffa0\035\uffa0\037\uffa0\042\uffa0\044\uffa0\053" +
    "\uffa0\056\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0" +
    "\066\uffa0\001\002\000\016\046\uffa6\047\uffa6\050\uffa6\051" +
    "\uffa6\063\uffa6\066\uffa6\001\002\000\016\046\113\047\112" +
    "\050\114\051\107\063\115\066\106\001\002\000\004\040" +
    "\uffa5\001\002\000\004\044\uffbf\001\002\000\004\044\uffac" +
    "\001\002\000\016\046\uff99\047\uff99\050\uff99\051\uff99\063" +
    "\uff99\066\uff99\001\002\000\016\046\113\047\112\050\114" +
    "\051\107\063\115\066\106\001\002\000\004\024\210\001" +
    "\002\000\004\043\uff98\001\002\000\004\043\212\001\002" +
    "\000\036\003\uff97\032\uff97\035\uff97\037\uff97\042\uff97\044" +
    "\uff97\053\uff97\056\uff97\061\uff97\062\uff97\063\uff97\064\uff97" +
    "\065\uff97\066\uff97\001\002\000\036\003\075\032\074\035" +
    "\102\037\077\042\061\044\055\053\011\056\010\061\101" +
    "\062\057\063\054\064\063\065\103\066\064\001\002\000" +
    "\042\003\uff96\032\uff96\033\uff96\034\uff96\035\uff96\037\uff96" +
    "\042\uff96\044\uff96\053\uff96\056\uff96\061\uff96\062\uff96\063" +
    "\uff96\064\uff96\065\uff96\066\uff96\001\002\000\036\003\uffae" +
    "\032\uffae\035\uffae\037\uffae\042\uffae\044\uffaf\053\uffae\056" +
    "\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae" +
    "\001\002\000\034\003\075\032\074\035\102\037\077\042" +
    "\061\053\011\056\010\061\101\062\057\063\054\064\063" +
    "\065\103\066\064\001\002\000\004\044\uffad\001\002\000" +
    "\004\066\221\001\002\000\010\025\uffe9\026\uffe9\045\232" +
    "\001\002\000\006\025\uff8e\026\uff8e\001\002\000\006\025" +
    "\225\026\224\001\002\000\036\003\uff8c\032\uff8c\035\uff8c" +
    "\037\uff8c\042\uff8c\044\uff8c\053\uff8c\056\uff8c\061\uff8c\062" +
    "\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\001\002\000\016" +
    "\046\uff8b\047\uff8b\050\uff8b\051\uff8b\063\uff8b\066\uff8b\001" +
    "\002\000\036\003\uff8d\032\uff8d\035\uff8d\037\uff8d\042\uff8d" +
    "\044\uff8d\053\uff8d\056\uff8d\061\uff8d\062\uff8d\063\uff8d\064" +
    "\uff8d\065\uff8d\066\uff8d\001\002\000\016\046\113\047\112" +
    "\050\114\051\107\063\115\066\106\001\002\000\004\026" +
    "\231\001\002\000\036\003\uff8a\032\uff8a\035\uff8a\037\uff8a" +
    "\042\uff8a\044\uff8a\053\uff8a\056\uff8a\061\uff8a\062\uff8a\063" +
    "\uff8a\064\uff8a\065\uff8a\066\uff8a\001\002\000\004\066\221" +
    "\001\002\000\006\025\uffe8\026\uffe8\001\002\000\004\044" +
    "\uffbc\001\002\000\004\044\uffb5\001\002\000\004\044\uffb2" +
    "\001\002\000\004\044\uffb7\001\002\000\004\026\uffc1\001" +
    "\002\000\020\024\250\046\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\063\ufff5\066\ufff5\001\002\000\004\026\uffc0\001\002\000" +
    "\016\046\uffc9\047\uffc9\050\uffc9\051\uffc9\063\uffc9\066\uffc9" +
    "\001\002\000\016\046\113\047\112\050\114\051\107\063" +
    "\115\066\106\001\002\000\004\026\246\001\002\000\036" +
    "\003\uffc8\032\uffc8\035\uffc8\037\uffc8\042\uffc8\044\uffc8\053" +
    "\uffc8\056\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\001\002\000\016\046\113\047\112\050\114\051" +
    "\107\063\115\066\106\001\002\000\004\026\251\001\002" +
    "\000\036\003\ufff6\032\ufff6\035\ufff6\037\ufff6\042\ufff6\044" +
    "\ufff6\053\ufff6\056\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6" +
    "\065\ufff6\066\ufff6\001\002\000\004\024\257\001\002\000" +
    "\006\024\ufff9\045\254\001\002\000\016\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\063\ufff8\066\ufff8\001\002\000\016\046" +
    "\113\047\112\050\114\051\107\063\115\066\106\001\002" +
    "\000\004\024\ufff7\001\002\000\004\026\260\001\002\000" +
    "\036\003\ufff4\032\ufff4\035\ufff4\037\ufff4\042\ufff4\044\ufff4" +
    "\053\ufff4\056\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065" +
    "\ufff4\066\ufff4\001\002\000\004\044\uffbb\001\002\000\004" +
    "\054\263\001\002\000\004\024\264\001\002\000\004\026" +
    "\265\001\002\000\036\003\uffc2\032\uffc2\035\uffc2\037\uffc2" +
    "\042\uffc2\044\uffc2\053\uffc2\056\uffc2\061\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\066\uffc2\001\002\000\004\044\uffb0" +
    "\001\002\000\050\003\uff90\032\uff90\033\uff90\034\uff90\035" +
    "\uff90\037\uff90\042\uff90\044\uff90\053\uff90\055\uff90\056\uff90" +
    "\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065" +
    "\uff90\066\uff90\001\002\000\004\066\276\001\002\000\004" +
    "\024\272\001\002\000\004\043\273\001\002\000\036\003" +
    "\ufff2\032\ufff2\035\ufff2\037\ufff2\042\ufff2\044\ufff2\053\ufff2" +
    "\056\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066" +
    "\ufff2\001\002\000\036\003\075\032\074\035\102\037\077" +
    "\042\061\044\055\053\011\056\010\061\101\062\057\063" +
    "\054\064\063\065\103\066\064\001\002\000\022\003\ufff1" +
    "\044\ufff1\053\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\066" +
    "\ufff1\001\002\000\006\024\uffed\045\277\001\002\000\014" +
    "\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\001\002\000" +
    "\014\061\101\062\057\063\054\064\063\065\103\001\002" +
    "\000\004\024\uffeb\001\002\000\004\066\303\001\002\000" +
    "\012\023\306\025\307\026\uffe9\045\232\001\002\000\004" +
    "\026\305\001\002\000\022\003\uffe5\044\uffe5\053\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\066\uffe5\001\002\000\016" +
    "\024\311\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\001" +
    "\002\000\004\026\310\001\002\000\022\003\uffe4\044\uffe4" +
    "\053\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\066\uffe4\001" +
    "\002\000\004\043\320\001\002\000\014\061\101\062\057" +
    "\063\054\064\063\065\103\001\002\000\004\024\314\001" +
    "\002\000\004\043\315\001\002\000\036\003\uffc4\032\uffc4" +
    "\035\uffc4\037\uffc4\042\uffc4\044\uffc4\053\uffc4\056\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\001\002" +
    "\000\036\003\075\032\074\035\102\037\077\042\061\044" +
    "\055\053\011\056\010\061\101\062\057\063\054\064\063" +
    "\065\103\066\064\001\002\000\022\003\uffc3\044\uffc3\053" +
    "\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\066\uffc3\001\002" +
    "\000\036\003\uffc7\032\uffc7\035\uffc7\037\uffc7\042\uffc7\044" +
    "\uffc7\053\uffc7\056\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7" +
    "\065\uffc7\066\uffc7\001\002\000\036\003\075\032\074\035" +
    "\102\037\077\042\061\044\055\053\011\056\010\061\101" +
    "\062\057\063\054\064\063\065\103\066\064\001\002\000" +
    "\022\003\uffc6\044\uffc6\053\uffc6\055\uffc6\056\uffc6\057\uffc6" +
    "\060\uffc6\066\uffc6\001\002\000\004\044\uffd0\001\002\000" +
    "\004\044\uffd1\001\002\000\004\043\326\001\002\000\022" +
    "\003\uffd7\044\uffd5\053\uffd7\055\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\066\uffd7\001\002\000\004\044\333\001\002\000\020" +
    "\003\036\053\011\055\004\056\010\057\015\060\016\066" +
    "\035\001\002\000\004\044\332\001\002\000\004\002\uffd6" +
    "\001\002\000\004\002\uffd4\001\002\000\004\002\001\001" +
    "\002\000\004\054\336\001\002\000\004\024\337\001\002" +
    "\000\004\026\340\001\002\000\022\002\uffea\003\uffea\027" +
    "\uffea\053\uffea\055\uffea\056\uffea\057\uffea\060\uffea\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\014\025\016\026\005\027\011\030\013\037" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\025\016\026\021\027\011\030\013\037\006" +
    "\001\001\000\014\025\016\026\020\027\011\030\013\037" +
    "\006\001\001\000\014\025\016\026\017\027\011\030\013" +
    "\037\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\027\052\026\001\001\000\016\007\031" +
    "\030\036\031\032\032\040\033\037\037\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\007\031\030\036" +
    "\031\032\032\323\033\037\037\033\001\001\000\016\007" +
    "\031\030\036\031\032\032\322\033\037\037\033\001\001" +
    "\000\004\040\301\001\001\000\002\001\001\000\016\007" +
    "\031\030\036\031\032\032\044\033\037\037\033\001\001" +
    "\000\016\007\031\030\036\031\032\032\043\033\037\037" +
    "\033\001\001\000\016\007\031\030\036\031\032\032\042" +
    "\033\037\037\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\046\046\047\001\001\000\006\006\270\040" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\052\001\001\000\032\003\065\005\072\010\067\011" +
    "\057\012\064\014\066\020\071\022\077\030\075\034\055" +
    "\035\061\040\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\065" +
    "\005\072\010\067\011\057\012\064\014\066\022\077\030" +
    "\075\034\265\035\061\040\070\001\001\000\002\001\001" +
    "\000\030\003\065\005\072\010\067\011\057\012\064\014" +
    "\066\022\077\030\075\034\260\035\061\040\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\065\005" +
    "\072\010\067\011\057\012\064\014\066\022\077\030\075" +
    "\034\236\035\061\040\070\001\001\000\030\003\065\005" +
    "\072\010\067\011\057\012\064\014\066\022\077\030\075" +
    "\034\235\035\061\040\070\001\001\000\030\003\065\005" +
    "\072\010\067\011\057\012\064\014\066\022\077\030\075" +
    "\034\234\035\061\040\070\001\001\000\030\003\065\005" +
    "\072\010\067\011\057\012\064\014\066\022\077\030\075" +
    "\034\233\035\061\040\070\001\001\000\004\101\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\065\005\072\010\067\011\057\012\064\014" +
    "\066\022\077\030\075\034\203\035\061\040\070\001\001" +
    "\000\030\003\065\005\072\010\067\011\057\012\064\014" +
    "\066\022\077\030\075\034\202\035\061\040\070\001\001" +
    "\000\004\063\163\001\001\000\036\003\065\005\072\010" +
    "\067\011\057\012\064\014\066\015\144\016\143\017\141" +
    "\022\077\030\075\034\142\035\061\040\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\067\104\001\001\000\006\023\107\024\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\124\024\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\105" +
    "\132\001\001\000\004\106\130\001\001\000\006\023\131" +
    "\024\110\001\001\000\002\001\001\000\006\023\133\024" +
    "\110\001\001\000\002\001\001\000\004\070\135\001\001" +
    "\000\002\001\001\000\004\071\137\001\001\000\032\003" +
    "\065\005\072\010\067\011\057\012\064\014\066\020\140" +
    "\022\077\030\075\034\055\035\061\040\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\065\005\072\010\067\011\057\012\064\014\066\015" +
    "\144\016\143\017\162\022\077\030\075\034\142\035\061" +
    "\040\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\150\001\001\000\032\003\065" +
    "\005\072\010\067\011\057\012\064\014\066\020\151\022" +
    "\077\030\075\034\055\035\061\040\070\001\001\000\002" +
    "\001\001\000\004\076\153\001\001\000\006\023\154\024" +
    "\110\001\001\000\002\001\001\000\004\077\156\001\001" +
    "\000\002\001\001\000\004\100\160\001\001\000\032\003" +
    "\065\005\072\010\067\011\057\012\064\014\066\020\161" +
    "\022\077\030\075\034\055\035\061\040\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\167\001" +
    "\001\000\006\023\170\024\110\001\001\000\002\001\001" +
    "\000\004\065\172\001\001\000\004\024\173\001\001\000" +
    "\002\001\001\000\004\066\175\001\001\000\032\003\065" +
    "\005\072\010\067\011\057\012\064\014\066\020\176\022" +
    "\077\030\075\034\055\035\061\040\070\001\001\000\002" +
    "\001\001\000\004\062\200\001\001\000\004\024\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\073\205\001\001\000\006\023\206\024\110\001" +
    "\001\000\002\001\001\000\004\074\210\001\001\000\002" +
    "\001\001\000\004\075\212\001\001\000\032\003\065\005" +
    "\072\010\067\011\057\012\064\014\066\020\213\022\077" +
    "\030\075\034\055\035\061\040\070\001\001\000\002\001" +
    "\001\000\004\061\215\001\001\000\030\003\065\005\072" +
    "\010\067\011\057\012\064\014\066\022\077\030\075\034" +
    "\216\035\061\040\070\001\001\000\002\001\001\000\004" +
    "\041\221\001\001\000\002\001\001\000\004\102\222\001" +
    "\001\000\004\002\225\001\001\000\002\001\001\000\004" +
    "\103\226\001\001\000\002\001\001\000\004\024\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\246\001\001\000\002\001\001\000\004\055" +
    "\243\001\001\000\004\024\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\251\024\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\254\001\001\000\006\004\255\024" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\273\001\001\000\032\003\065" +
    "\005\072\010\067\011\057\012\064\014\066\020\274\022" +
    "\077\030\075\034\055\035\061\040\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\277\001\001\000" +
    "\006\006\300\040\267\001\001\000\002\001\001\000\004" +
    "\041\303\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\311\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\312\040" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\315\001\001\000\032\003\065\005\072\010\067\011" +
    "\057\012\064\014\066\020\316\022\077\030\075\034\055" +
    "\035\061\040\070\001\001\000\002\001\001\000\004\056" +
    "\320\001\001\000\032\003\065\005\072\010\067\011\057" +
    "\012\064\014\066\020\321\022\077\030\075\034\055\035" +
    "\061\040\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\053\327\054" +
    "\326\001\001\000\002\001\001\000\016\007\031\030\036" +
    "\031\032\032\330\033\037\037\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        Pintar pintar;
        public String textoVar="";
        public parser(lexico lex,Pintar pintar) { 
            super(lex);
            this.pintar=pintar;  
	}
        public void pintarImportar(String texto){
            this.pintar.insertar("importar"+"("+texto+")"+";"+"\n");
            pintar.pintaMora(0,8);
            pintar.pintaAzul(8,1);
            pintar.pintaRojo(9,texto.length());
            pintar.pintaAzul(9+texto.length(),1);
        }
        public void pintarDeclaracion(String vis,String dato,String id){
            this.pintar.insertar(vis+" "+dato+" "+id+";"+"\n");
            pintar.pintaMora(0,vis.length());
            pintar.pintaAzul(vis.length()+1,dato.length());
        }
        public void pintarClase(String vis,String id,String padre){
            if(padre.isEmpty()){
                this.pintar.insertar("\n");
                this.pintar.insertar(vis+" "+"clase"+" "+id+" "+"["+"\n");
                pintar.pintaMora(0,vis.length());
                pintar.pintaMora(vis.length()+1,5);
            }else{
                this.pintar.insertar("\n");
                this.pintar.insertar(vis+" "+"clase"+" "+id+" "+"extiende"+" "+padre+" "+"["+"\n");
                pintar.pintaMora(0,vis.length());
                pintar.pintaMora(vis.length()+1,5);
                pintar.pintaMora(vis.length()+id.length()+8,8);
            }
        }
        public void pintarMetodo(String vis,String tipoDato ,String id){
                this.pintar.insertar("\n");
                this.pintar.insertar(pintar.tabulacion);
                this.pintar.insertar(vis+" "+tipoDato+" "+id+" "+"() ["+"\n");
                pintar.pintaMora(0,vis.length());
                pintar.pintaAzul(vis.length()+1,tipoDato.length());
        }
        public void insetarTexto(String texto){
            this.pintar.insertar(texto);
        }
        
        public void pintarComentarioD(String texto){
            pintar.insertar(texto);
            pintar.pintaVerde(0,texto.length());
        }
        public void pintarComentarioM(String texto){
            pintar.insertar(texto);
            pintar.pintaVerde(0,texto.length());
        }
        public void pintarVarLocal(String tipo,String id){
            this.pintar.insertar(tipo+" "+id+";"+"\n");
            pintar.pintaAzul(0,tipo.length());
        }
        public void insertarColor(String texto,String color){
            this.pintar.insertar(texto);
            switch(color){
            case "rojo":
                pintar.pintaRojo(0,texto.length());
            break;
            case "amarillo":
                pintar.pintaAmarillo(0,texto.length());
            break;
            case "azul":
                pintar.pintaAzul(0,texto.length());
            break;
            case "morado":
                pintar.pintaMora(0,texto.length());
            break;
            case "naranja":
                pintar.pintaNaranja(0,texto.length());
            break;
            case "cafe":
                pintar.pintaCafe(0,texto.length());
            break;
            }
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // otro ::= datos OR NT$36 boleano 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otro",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$36 ::= 
            {
              Object RESULT =null;
 parser.insertarColor("|| ","azul"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$36",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // otro ::= datos AND NT$35 boleano 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otro",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$35 ::= 
            {
              Object RESULT =null;
 parser.insertarColor("&& ","azul"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$35",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // otro ::= datos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otro",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // boleano ::= datos operadorBinario NT$34 otro 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boleano",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$34 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 parser.insertarColor(e+" ","azul"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$34",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operadorBinario ::= DIFERENTE 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operadorBinario ::= IGUAL 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operadorBinario ::= MENORIGUAL 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operadorBinario ::= 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operadorBinario ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operadorBinario ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorBinario",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // datos ::= DECIMALVAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.insertarColor(e+" ","rojo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // datos ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.insetarTexto(e+" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // datos ::= VERDADERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.insertarColor(e+" ","amarillo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // datos ::= FALSO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.insertarColor(e+" ","amarillo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // datos ::= ENTEROVAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.insertarColor(e+" ","naranja");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // datos ::= CADENA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.insertarColor(e+" ","cafe"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datos",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // varlocalC ::= ASIGNAR NT$33 datos FINL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.insetarTexto(";\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varlocalC",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$33 ::= 
            {
              Object RESULT =null;
 parser.insetarTexto(":="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // varlocalC ::= FINL 
            {
              Object RESULT =null;
		 parser.insetarTexto(";\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varlocalC",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // varlocal ::= datopri NT$31 identificador NT$32 varlocalC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varlocal",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$32 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.insetarTexto(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$31 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.pintar.insTab(); parser.insertarColor(a+" ","azul"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // estructuraSiC ::= dentroMetodo CORC 
            {
              Object RESULT =null;
		parser.pintar.resTabular();parser.pintar.insTab(); parser.insetarTexto("]\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraSiC",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // estructuraSiC ::= CORC 
            {
              Object RESULT =null;
		 parser.pintar.resTabular();parser.pintar.insTab(); parser.insetarTexto("]\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraSiC",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // estructuraSinoSi ::= SINO_SI PARA NT$28 boleano PARC NT$29 CORA NT$30 estructuraSiC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraSinoSi",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.pintar.tabular();  parser.insetarTexto("[\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.insetarTexto(")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$28 ::= 
            {
              Object RESULT =null;
parser.pintar.insTab(); parser.insertarColor("SINO_SI ","azul");parser.insetarTexto("("); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // estructuraSi ::= SI PARA NT$25 boleano PARC NT$26 CORA NT$27 estructuraSiC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraSi",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$27 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.pintar.tabular(); parser.insetarTexto("[\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.insetarTexto(")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$25 ::= 
            {
              Object RESULT =null;
parser.pintar.insTab(); parser.insertarColor("SI ","azul");parser.insetarTexto("("); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // estructuraSino ::= SINO CORA NT$24 estructuraSiC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraSino",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$24 ::= 
            {
              Object RESULT =null;
 parser.pintar.insTab();parser.pintar.tabular();parser.insertarColor("SINO ","azul");parser.insetarTexto("[\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // estructuraMientras ::= MIENTRAS PARA NT$21 boleano PARC NT$22 CORA NT$23 estructuraSiC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraMientras",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.insetarTexto("[\n");parser.pintar.tabular(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.insetarTexto(") ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$21 ::= 
            {
              Object RESULT =null;
parser.pintar.insTab();parser.insertarColor("MIENTRAS ","azul");parser.insetarTexto("( ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // estructuraFor ::= DESDE NT$17 asignacionVal HASTA NT$18 boleano SINCREMENTO NT$19 datos CORA NT$20 estructuraSiC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraFor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.insetarTexto("[\n");parser.pintar.tabular();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.insertarColor("INCREMENTO ","azul");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.insertarColor("HASTA ","azul");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$17 ::= 
            {
              Object RESULT =null;
 parser.pintar.insTab();parser.insertarColor("DESDE ","azul");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // asignacionVal ::= ID ASIGNAR NT$16 datos 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionVal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$16 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.insetarTexto(e+" ");parser.insertarColor(":= ","azul");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // dentroMetodoC ::= estructuraSino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodoC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // dentroMetodoC ::= estructuraSinoSi dentroMetodoC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodoC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // dentroMetodoC ::= estructuraSinoSi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodoC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // dentroMetodoC ::= dentroMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodoC",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // dentroMetodo ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dentroMetodo ::= error dentroMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // dentroMetodo ::= sumResUno FINL NT$15 dentroMetodo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$15 ::= 
            {
              Object RESULT =null;
parser.insetarTexto(";\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // dentroMetodo ::= sumResUno FINL 
            {
              Object RESULT =null;
		parser.insetarTexto(";\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dentroMetodo ::= imprimir dentroMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // dentroMetodo ::= imprimir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // dentroMetodo ::= llamarMetodo dentroMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dentroMetodo ::= llamarMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // dentroMetodo ::= estructuraMientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // dentroMetodo ::= estructuraMientras dentroMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // dentroMetodo ::= estructuraFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dentroMetodo ::= estructuraFor dentroMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dentroMetodo ::= estructuraSi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dentroMetodo ::= estructuraSi dentroMetodoC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // dentroMetodo ::= varlocal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dentroMetodo ::= varlocal dentroMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dentroMetodo ::= asignarId dentroMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dentroMetodo ::= asignarId 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dentroMetodo ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dentroMetodo ::= comentario dentroMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroMetodo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sumResUno ::= ID DISMINUCION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.pintar.insTab();parser.insetarTexto(e);parser.insertarColor("--","azul");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumResUno",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sumResUno ::= ID AUMENTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.pintar.insTab();parser.insetarTexto(e);parser.insertarColor("++","azul");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumResUno",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // imprimir ::= IMPRIMIR PARA LITERAR PARC FINL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.pintar.insTab();parser.insertarColor("imprimir ","morado");parser.pintar.insertar("( ");parser.insertarColor(e,"rojo");parser.pintar.insertar(" );\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imprimir",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // metodo ::= visibilidad datopri ID PARA NT$13 parametro PARC CORA NT$14 estructuraSiC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
parser.insetarTexto(")[\n");parser.pintar.tabular(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$13 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.insetarTexto("\n");parser.pintar.insTab();parser.insertarColor(a+" ","morado");parser.insertarColor(b+" ","azul");parser.insetarTexto(e+"(");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // metodo ::= visibilidad datopri ID PARA PARC CORA NT$12 estructuraSiC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$12 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.pintar.insTab();parser.pintarMetodo(a,b,e); parser.pintar.tabular(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignarId ::= ID ASIGNAR NT$11 datos FINL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		parser.pintar.insertar(";\n ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarId",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$11 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.pintar.insTab();parser.insetarTexto(e+" ");parser.pintar.insertar(" := ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dentroclase ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroclase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dentroclase ::= error dentroclase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroclase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dentroclase ::= metodo dentroclase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroclase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dentroclase ::= metodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroclase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dentroclase ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroclase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dentroclase ::= comentario dentroclase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroclase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dentroclase ::= declaracionvar dentroclase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroclase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dentroclase ::= constructor dentroclase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroclase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dentroclase ::= constructor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroclase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dentroclase ::= declaracionvar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dentroclase",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // clase ::= visibilidad CLASE ID EXTIENDE ID CORA NT$10 CORC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 parser.insetarTexto("]\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$10 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.pintarClase(a,e,f); parser.pintar.tabular();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // clase ::= visibilidad CLASE ID EXTIENDE ID CORA NT$9 dentroclase CORC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 parser.insetarTexto("]\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.pintarClase(a,e,f);parser.pintar.tabular(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // clase ::= visibilidad CLASE ID CORA NT$8 dentroclase CORC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 parser.pintar.resTabular(); parser.insetarTexto("]\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.pintarClase(a,e,""); parser.pintar.tabular(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // clase ::= visibilidad CLASE ID CORA NT$7 CORC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 parser.insetarTexto("]\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.pintarClase(a,e,""); parser.pintar.tabular();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // datopri ::= VACIO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datopri",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // datopri ::= BOOLEANO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datopri",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // datopri ::= CADENA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datopri",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // datopri ::= DECIMAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datopri",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // datopri ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datopri",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // visibilidad ::= PROTEGIDO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // visibilidad ::= PRIVADO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // visibilidad ::= PUBLICO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("visibilidad",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracionvar ::= visibilidad datopri ID ASIGNAR FINL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.pintar.insTab(); parser.pintarDeclaracion(a,b,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionvar",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracionvar ::= visibilidad datopri identificador FINL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.pintar.insTab();parser.pintarDeclaracion(a,b,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionvar",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comentario ::= COMVA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.pintar.insTab();parser.pintarComentarioM(e+"\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentario",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comentario ::= DDIAGCOM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.pintar.insTab();parser.pintarComentarioD(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentario",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // identificador ::= ID COMA identificador 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e+", "+a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // identificador ::= ID 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // importar ::= IMPORTAR PARA LITERAR PARC FINL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.pintarImportar(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importar",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametro ::= datopri ID COMA NT$6 parametro 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.insertarColor(a+" ","azul");parser.insetarTexto(e+",");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametro ::= datopri ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.insertarColor(a+" ","azul");parser.insetarTexto(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constructor ::= ID PARA NT$4 PARC CORA NT$5 estructuraSiC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 parser.pintar.tabular();parser.insetarTexto(" ) [\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.pintar.insTab(); parser.insetarTexto(e+" (");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constructor ::= ID PARA NT$2 parametro PARC CORA NT$3 estructuraSiC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 parser.pintar.tabular();parser.insetarTexto(" ) [\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.pintar.insTab(); parser.insetarTexto(e+" (");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // llamarMetodo ::= ID PARA NT$1 mandarParametro PARC FINL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 parser.insetarTexto(");\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamarMetodo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.pintar.insTab(); parser.insetarTexto(e+"(");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // llamarMetodo ::= ID PARA PARC FINL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.pintar.insTab();parser.insetarTexto(e+"();\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamarMetodo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // mandarParametro ::= datos COMA NT$0 mandarParametro 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mandarParametro",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
parser.insetarTexto(", ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // mandarParametro ::= datos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mandarParametro",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("error "+e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= error inicio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= clase 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= comentario inicio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= importar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= importar inicio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

